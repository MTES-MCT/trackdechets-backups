import axios from "axios";
import { createWriteStream } from "fs";

const DB_NAME = "prisma_autobackup";
const API_HOST = "api.scaleway.com";
const API_ENDPOINT = "/rdb/v1/regions/fr-par/backups";
const API_BACKUPS_URL = `https://${API_HOST}${API_ENDPOINT}`;

const { SCALEWAY_SECRET_KEY, SCALEWAY_DB_SANDBOX_ID, SCALEWAY_DB_PROD_ID } =
  process.env;

const auth = { "X-Auth-Token": SCALEWAY_SECRET_KEY };

const client = axios.create({
  baseURL: API_BACKUPS_URL,
  headers: { ...auth }
});

/**
 * Generate a valid backup download link and return it
 * The link is generated by calling /export on the database resource
 * Cf https://developers.scaleway.com/en/products/rdb/api/#post-67b5c9
 */
async function getDownloadUrl(backupId: string) {
  const backupResponse = await client(`/${backupId}`, {
    headers: { ...auth }
  });
  const backup = backupResponse.data;
  if (!backup.download_url || backup.download_url_expires_at > Date.now()) {
    // export backup if it has not been exported yet
    if (backup.status !== "exporting") {
      await client.post(`/${backupId}/export`, {}, { headers: { ...auth } });
    }
    return getDownloadUrl(backupId);
  }

  return backup.download_url;
}

/**
 * Get the remote backup file and pipe the content to disk
 */
async function download(downloadUrl: string) {
  const writer = createWriteStream("backup.custom");
  const downloadResponse = await axios.get(downloadUrl, {
    responseType: "stream"
  });
  downloadResponse.data.pipe(writer);
  return new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });
}

export default async function backup() {
  const listBackupsResponse = await client.get("/", {
    params: {
      name: DB_NAME,
      order_by: "created_at_desc",
      instance_id: SCALEWAY_DB_SANDBOX_ID
    }
  });
  const latest = listBackupsResponse.data.database_backups[0];

  const downloadUrl = await getDownloadUrl(latest.id);
  return download(downloadUrl);
}
